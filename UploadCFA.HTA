<script language="VBScript">
  Sub DoResize
  	Dim intSize : intSize = 640
  	Dim posLeft, posTop
  	
    'resize   
    window.resizeTo intSize, intSize

    posLeft = (Document.ParentWindow.Screen.AvailWidth - intSize) / 2
    posTop = (Document.ParentWindow.Screen.AvailHeight - intSize) / 2     
    'move to centerscreen
    window.moveTo posLeft, posTop
  End sub

  'Run the subroutine to position the window before the anything is rendered.
  DoResize() 
</script>

<head>
<title>eDiscovery CFA Uploader v2</title>
<HTA:APPLICATION ID="appShareHTA"
     APPLICATIONNAME="eDiscovery Uploader"
     SCROLL="no"
     SINGLEINSTANCE="yes"
     WINDOWSTATE="Normal"
     VERSION="1.3"
/>
<meta name="description" content="Case File Archive Uploader">
<meta name="last modified" content="04/12/2021">
<meta name="author" content="Eric S. Pooch">
<style>
	body{font-family:Calibri;}
</style>
</head>
<body onhelp="ShowHelp">
<span id = "Processing"></span>
<script language="VBScript">

Const debugLvl = 5: Const infoLvl = 4 : Const warnLvl = 3: Const errorLvl = 2 : Const fatalLvl = 1 : Const silentLvl = 0
Dim logLvl : logLvl = infoLvl

Dim objFSO   : Set objFSO = CreateObject("Scripting.FileSystemObject")
Dim objShell : Set objShell = CreateObject("WScript.Shell")

Const archPath  = "\\ad\dfs\SDAT-Shared2\Attorney\CRIMCASE\CaseFile_Archive\"

'Dim inputPath : inputPath  = archPath & "_FOR_DISCLOSURE\eDiscovery_EDMS\"
'Dim scanPath : scanPath = inputPath & "eDisCityAtty\"
'Dim eSharePath : eSharePath = inputPath & "eShare\"
'Const scanPath  = "\\ad\dfs\Scans\sdat-scan01\eDisCityAtty\"
Const scanPath  = "\\ad\dfs\SDAT-Shared2\Attorney\CRIMCASE\CRIMFORM\eDiscovery_EDMS\eDisCityAtty\"
Const cloudPath  = "\\ad\dfs\SDAT-Shared2\Attorney\CRIMCASE\CRIMFORM\eDiscovery_EDMS\FileCloud\"
Const eSharePath = "\\ad\dfs\SDAT-Shared2\Attorney\CRIMCASE\CRIMFORM\eDiscovery_EDMS\eShare\"
Const placePath = "\\ad\dfs\SDAT-Shared2\Attorney\CRIMCASE\CaseFile_Archive\Resources\05_Client\Digital Media Place Holder.dotx"

Dim aryAcroPaths : aryAcroPaths = Array( "C:\Program Files\Adobe\Acrobat 10.0\",_
										 "C:\Program Files\Adobe\Acrobat 2015\",_
										 "C:\Program Files\Adobe\Acrobat 11.0\",_
										 "C:\Program Files (x86)\Adobe\Acrobat DC\",_
										 "C:\Program Files (x86)\Adobe\Acrobat 2015\",_
										 "C:\Program Files (x86)\Adobe\Acrobat 11.0")
' Const strGSPath	= "\\ad\dfs\SDAT-Shared2\Attorney\CRIMCASE\CaseFile_Archive\Resources\GPLGS\bin"
Const strGSPath	= "C:\Program Files\gs\gs9.53.3\bin\gswin64c.exe"
Dim strGSExePath : strGSExePath = strGSPath & "gswin64c.exe"

' Make sure we have network connection
If NOT (objFSO.FolderExists(scanPath) AND objFSO.FolderExists(archPath) ) Then
	ShowMessage errorLvl, "Scanner Folder Not Found " & vbCRLF & scanPath & vbCRLF &_
		"Try Restarting computer to restore network connection."
	Self.Close()
End If

' Pull out the file path argument from the command string.
Dim strCommand  : strCommand  = appShareHTA.commandLine 
Dim strFilePath : strFilePath = Trim(Split(strCommand, "/f")(1))

' Pull out the no remote discovery option from the command string.
Dim boolNoDisco   : boolNoDisco   = True 'InStr(strCommand, " /nodisco ") >0

Dim aryFilePaths : aryFilePaths = getPathsFromArgs(strFilePath)
strFilePath = aryFilePaths(0)

Dim strFileName : strFileName = objFSO.GetFileName(strFilePath)
Dim strCMSCase  : strCMSCase = Split(strFileName, "_")(0)
Dim boolInArch : boolInArch = (InStr(strFilePath, archPath) And InStr(objFSO.GetParentFolderName(strFilePath), strCMSCase))>0

Dim aryImageTypes : aryImageTypes = Array("jpg", "png", "gif", "pict", "raw", "tif", "tiff")
Dim boolDebug : boolDebug = objFSO.FileExists(objFSO.BuildPath(objShell.ExpandEnvironmentStrings("%USERPROFILE%"), "debug.txt"))
Dim boolPics : boolPics =  	UBound(aryFilePaths) > 0
Dim boolGS : boolGS =  		objFSO.FolderExists(strGSPath)

Dim boolPro : boolPro = False
Dim strAcroPath
For Each  strAcroPath In aryAcroPaths
	If objFSO.FolderExists(strAcroPath) Then
		boolPro = True
		Exit For
	End If
Next
 
If boolPics Then
	boolPics = False
	Dim strImageTypes
	For Each strImageTypes In aryImageTypes
		If LCase(objFSO.GetExtensionName(strFileName)) = strImageTypes Then
		 	boolPics = True
		End If
	Next
End If

If boolDebug Then
	logLvl = debugLvl
	ShowMessage debugLvl, "Debug mode enabled" & vbCrLf & strCommand
	ShowMessage debugLvl, Join(aryFilePaths, vbCrLf)
ElseIf False Then ' set to true to warn users.
	ShowMessage fatalLvl, "Undergoing Maintenance. Try again later."
End If

Dim strFileHelp : strFileHelp = TypeErrorForFile(strFileName)

If NOT (objFSO.FileExists(strFilePath) OR objFSO.FolderExists(strFilePath)) Then
	strFileHelp = "The file could not be found. Try again."
End If

If Len(strFileHelp) Then
	ShowMessage fatalLvl, strFileName & " is not a valid data file. " & strFileHelp
End If

Sub Window_OnLoad
  	'This method will be called when the application loads
    SetFormContent()
End Sub

Sub Upload
	Dim strCopyPath
	
	If Len(CMSNumber.Value) < 6 Or InStr(CMSNumber.Value, "M") = 1 Then
		ShowMessage errorLvl, "You must enter a valid CMS Case Number"
		Exit Sub
	End If
	
	Processing.InnerHTML = "Processing... "
	SubmitButton.InnerHTML = ""
	
	For Each objButton in office
		If objButton.Checked Then
		
			If objButton.value = "Archive" Then
				strCopyPath = scanPath
				objShell.Run "explorer.exe /e," & archPath & CMSNumber.Value
				
			ElseIf objButton.value = "FileCloud" Then
				strCopyPath = cloudPath
				objShell.Run "https://filecloud.sandiego.gov/"
				
			ElseIf objButton.value = "Retained" Then
				Dim strSubject : strSubject = "New Discovery is available on City Attorney case " & CMSNumber.Value
				Dim strBody : strBody = vbCrLf & strSubject & ". Please pick up at our office and allow for approximately 5-10 minutes for us to process your request. " &_ 
							"Bring this notice with you for faster service." & vbCrLf & vbCrLf &_
							"$0.25 - Page Photocopy; $7.45 - CD or DVD; $9.00 - Cassette Tape" & vbCrLf & vbCrLf &_
							"Office of the City Attorney" & vbCrLf &_
							"1200 3rd Ave #700" & vbCrLf &_
							"San Diego, CA 92101" & vbCrLf &_
							"619-533-5500"  & vbCrLf & vbCrLf &_
							"For CA office reference:" & vbCrLf & Join(aryFilePaths, vbCrLf)
				strSubject = strSubject & "&body=" & strBody
				
				objShell.Run "OUTLOOK.EXE /c ipm.note /m ""&subject=" & strSubject & """"
				'		 	""" /a " & """" & strFilePath & """"
				
			Else
				If NOT objFSO.FolderExists(archPath & CMSNumber.Value) Then
					ShowMessage errorLvl, "This discovery cannot be sent to eShare without an Initial Disclosure."
     				Exit Sub
				Else
					strCopyPath = eSharePath & objButton.value & "\"
					objShell.Run "explorer.exe /e," & archPath & CMSNumber.Value
				End If
			End If
			Exit For
  		End if
	Next

	If placeholder.Checked Then 
		PrintPlaceHolder()
	End If
	
	If IsEmpty(strCopyPath) Then
 		Self.Close()
	End If
	
	If pdfsummary.Checked Then
		If boolPics Then
			'Generate the contact sheet
			If boolGS Then
				strFilePath = ContactSheetGS(aryFilePaths)
			ElseIf boolPro Then
				strFilePath = ContactSheet(aryFilePaths)
			End If
			If Len(strFilePath) Then
				'Send the contact sheet to the recipient 
				objFSO.MoveFile strFilePath, _
					objFSO.BuildPath(strCopyPath, CMSNumber.Value & "_PHT_" & "Photo-Summary."& objFSO.GetExtensionName(strFilePath))
			
				'Send the original photos just to the archive
				If Not boolInArch Then
					strCopyPath = scanPath
				Else
					Self.Close()
				End If
			Else
				ShowMessage errorLvl, "Cannot convert pictures to PDF"
			End If
		Else
			ShowMessage errorLvl, "These are not Pictures."
		End If
	End If
	
	For Each strFilePath In aryFilePaths
		Dim boolError : boolError = False
		Dim strFileHelp : strFileHelp = TypeErrorForFile(strFilePath)
		
		If Len(strFileHelp) > 0 Then
			boolError = True
			ShowMessage errorLvl, strFileHelp
		ElseIf objFSO.FolderExists(strFilePath) Then
			'zip it
			strFilePath = CompressFolder(strFilePath)
			
		ElseIf objFSO.GetFile(strFilePath).Size > 740000000 Then
			boolError = True
			ShowMessage errorLvl, "This file is too big to proceess:" & vbCrLf & strFilePath
		End If
		
		If boolError Then
			'skip processing 
		ElseIf objFSO.FileExists(strFilePath) Then
			objFSO.CopyFile strFilePath, objFSO.BuildPath(strCopyPath, FormatFileName(objFSO.GetFileName(strFilePath)))
		Else
			ShowMessage errorLvl, "File Not Found " & vbCRLF & strFilePath
		End If
	Next

    Self.Close()
End Sub

Function FormatFileName(strFileName)
	Dim strDestName : strDestName = strFileName

	If strCMSCase <> CMSNumber.Value OR FileType.Value <> "" Then
   		' Get rid of '_'s that will confuse the server.
		strDestName = Replace(strDestName, "_", "-")

		If FileType.Value <> "" Then
			' Add the destination folder for the file type
			strDestName = FileType.Value & "_" & strDestName
		End If
		strDestName = CMSNumber.Value & "_" & strDestName
	End If
	FormatFileName = strDestName

End Function


'*********************************************************
' Purpose:	Turn the script arguments into an array of paths.
' 			If there are spaces in a path, it will be quoted.
' 			If there are not spaces, it will not be quoted.
' 			This makes it difficult to determine how to separate the paths 
' 			when there are multiple paths, some quoted, some not.
' Inputs:	strPathList: string with a bunch of quoted or unquoted paths.
' Returns:	Array of paths to the specified files.
'*********************************************************
Function getPathsFromArgs(strPathList)

	Dim boolInQuote	: boolInQuote = False
	Dim numStartLoc : numStartLoc = 1
	Dim numEndLoc   : numEndLoc = 1
	Dim numEndFinal : numEndFinal = Len(strPathList)
	
	While numEndLoc < numEndFinal
		Dim numLength
		numEndLoc = InStr(numStartLoc, strPathList, """")
		If numEndLoc <= 0 Then numEndLoc = numEndFinal + 1
		
		numLength = (numEndLoc - numStartLoc)
		
		If boolInQuote Then
			strPaths = strPaths & Mid( strPathList, numStartLoc, numLength) & vbCrLf
			numEndLoc = numEndLoc + 1
		ElseIf numLength > 1 Then
			strPaths = strPaths & Replace( Trim( Mid( strPathList, numStartLoc, numLength)), " ", vbCrLf ) & vbCrLf
		End If
		numStartLoc = numEndLoc + 1
					
		boolInQuote = Not boolInQuote
		
		'WScript.Echo(strPaths & numStartLoc & " " & numEndLoc & " " & numEndFinal)
	Wend
	strPaths = Left(strPaths, Len(strPaths) - Len(vbCrLf))
	getPathsFromArgs = Split(strPaths, vbCrLf)
End Function



'*********************************************************
' Purpose:	Consolidate multiple image files into one PDF
'			with file name caption at a reduced resolution
'			Using ghostScript.
' Inputs:	aryFiles: array of JPEG or GIF file paths.
' Returns:	Path to the created file, in the %TEMP% folder.
'*********************************************************
Function ContactSheetGS(aryFiles)
	Dim strViewList : strViewList = ""
	ContactSheetGS = objFSO.BuildPath(objShell.ExpandEnvironmentStrings( "%TEMP%" ), objFSO.GetTempName & ".pdf")
	'Run ghostscript quiet, with pdf output, ebook setting:150dpi, output to the temp file,
	'	caption of the first file name to set the caption box size,
	'	include modified caption.ps for caption code, 
	'	include standard viewjpeg.pd and viewjpeg.ps for view image code.
	Dim strGSCommand : strGSCommand = """" & strGSExePath & """" &_ 
		" -dQUIET -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -dPDFSETTINGS=/ebook" &_
		" -sOutputFile=""" & ContactSheetGS & """" &_
		" -sCap=""" & objFSO.GetFileName(aryFiles(0)) & """" &_
		" """ & archPath & "Resources\caption.ps" & """ """ & strGSPath & "viewjpeg.ps" & """ """ &  strGSPath & "viewjpeg.ps"""
		
	For Each strPicPath In aryFiles
		' Each file gets a flag "-sCap=" to set the cation text for modified caption.ps,
		' and a call to viewJPEG (or viewGIF) to display the image, and a showpage to complete the page.  
		' -sCap="IMG_245.jpg" -c "(D:/-/-/IMG_245.jpg) viewJPEG showpage"
		If LCase(objFSO.GetExtensionName(strPicPath)) = "jpg" Then
			strViewList = strViewList & " -sCap=""" & objFSO.GetFileName(strPicPath) & """" & " -c ""(" & strPicPath & ") viewJPEG showpage"""
			
		ElseIf LCase(objFSO.GetExtensionName(strPicPath)) = "gif" Then
			strViewList = strViewList & " -sCap=""" & objFSO.GetFileName(strPicPath) & """" & " -c ""(" & strPicPath & ") viewGIF  showpage"""
		End If
	Next
	'Apparent path separator bug in viewJPEG
	strViewList = Replace(strViewList, "\", "/")

	strGSCommand = strGSCommand & strViewList
	shellExec(strGSCommand)
	
	If Not objFSO.FileExists(ContactSheetGS) Then
		 ContactSheetGS =  ""
	End If
End Function


'*********************************************************
' Purpose:	Consolidate multiple image files into one PDF
'			with file name caption at a reduced resolution
'			Using Acrobat and WIA.
' Inputs:	aryFiles: array of JPEG or GIF file paths.
' Returns:	Path to the created file, in the %TEMP% folder.
'*********************************************************
Function ContactSheet(aryFiles)
	Dim AcroApp :	Set AcroApp = CreateObject("AcroExch.App")
	Dim PDDoc : Set PDDoc = CreateObject("AcroExch.PDDoc")
	Dim strPicPath, strPicExt, blnRet
	
	Dim strPDFPath : strPDFPath = objFSO.BuildPath(objShell.ExpandEnvironmentStrings( "%TEMP%" ), objFSO.GetTempName & ".pdf")
	ContactSheet = strPDFPath

	'Create the summary PDF.
	If PDDoc.Create <> True Then
		 ShowMessage errorLvl, "Unable to create new PDF file. The Acrobat application may not support editing."
		 AcroApp.Exit()
		Exit Function
	End If
	
	For Each strPicPath In aryFiles
		Dim strPicName : strPicName = objFSO.GetFileName(strPicPath)
	 	Dim strFileExt : strFileExt = LCase(objFSO.GetExtensionName(strPicPath))
	 	
	 	Dim i, boolIsImage : boolIsImage = False
	 	For i = 0 to UBound(aryImageTypes)
	 		If strFileExt = aryImageTypes(i) Then
	 			boolIsImage = True
	 			i = 100
	 		End If
	 	Next

		If boolIsImage Then
					
			Dim tmpPicPath : tmpPicPath = OptimizeImageToSize(strPicPath, "pcscreen", 10)
			If AddImageCapPage(PDDoc, tmpPicPath, strPicName) <> True Then
				ShowMessage errorLvl, "Failed to add file to PDF: " & tmpPicPath
			End If
			
			If PDDoc.Save(1 Or 32, strPDFPath) <> True Then
				ShowMessage errorLvl, "Failed to save file: " & strPDFPath
			End If
			
			If tmpPicPath <> strPicPath Then
				objFSO.GetFile(tmpPicPath).Delete
			End If
		End If
	Next
	
	' Fill in pdf properties.
	PDDoc.SetInfo "Title", "Low Res Photograph Summary Sheet"
	PDDoc.SetInfo "Author", "San Diego City Attorney's Office"
	PDDoc.SetInfo "Subject", "CA case number: " & CMSNumber.Value
	PDDoc.SetInfo "Keywords", "%CA$13$PHT%,CA%" & CMSNumber.Value
	
	If PDDoc.Save(1 Or 32, strPDFPath) <> -1 Then
				ShowMessage errorLvl, "Failed to save " & strPDFPath
	End If
		
	PDDoc.Close()
	'AcroApp.CloseAllDocs()
	AcroApp.Exit()
End Function

'*********************************************************
' Purpose:	Add an image to the PDDoc, with specified caption. 
' Inputs:	PDDoc: "AcroExch.PDDoc" object.
'			strPicPath: Path to the image to add.
'			strPicName: Caption to add.
'Returns:	True (-1) if successful. False (0) if error.
'*********************************************************
Function AddImageCapPage(PDDoc, strPicPath, strPicName)
	Dim AVDoc : Set AVDoc = CreateObject("AcroExch.AVDoc")
	Dim blnRet : blnRet = AVDoc.Open(strPicPath, strPicName)
	AddImageCapPage = False
	
	If blnRet <> True Or Not AVDoc.IsValid Then
		ShowMessage errorLvl, "Unable to open file: " & tmpPicPath
	Else
		Dim PDTmpDoc : Set PDTmpDoc = AVDoc.GetPDDoc()
		
		'Insert picture page into the pdf Doc
		blnRet = PDDoc.InsertPages(PDDoc.GetNumPages-1, PDTmpDoc, 0, PDTmpDoc.GetNumPages, False)
		If blnRet <> True Then
			ShowMessage errorLvl, "Could not insert image: " & strPicPath
		Else
			AddCaption PDDoc, PDDoc.GetNumPages-1, strPicName
			AddImageCapPage = True
		End If
				
		PDTmpDoc.Close()
	End If
	
	AVDoc.Close(1)

End Function
'*********************************************************
' Purpose:	Interface to ReSizeImage with easy inputs and DPI calculation.
' Inputs:	strPath: Path to the image file.
' 			strOpt: Acrobat Distiller optimization pre-set 
'					(screen, ebook, printer, prepress).
'			intMaxDimInch : Maximum dimension in inches.
' Returns:	ReSizeImage result : path to the created file, in the %TEMP% folder.
'*********************************************************
Function OptimizeImageToSize(strPath, strOpt, intMaxDimInch)
	Dim intRes, intMaxDim

	Select Case LCase(strOpt)
		Case "screen"
			intRes = 72
		Case "pcscreen"
			intRes = 96
		Case "ebook"
			intRes = 150
		Case "printer"
			intRes = 300
		Case "prepress"
			intRes = 300
		Case Else '"default"
			intRes = 72
	End Select
	intMaxDim = intMaxDimInch*intRes
	OptimizeImageToSize = ReSizeImage(strPath, intRes, intMaxDim)
End Function

'*********************************************************
' Purpose:	ReSize an image, including adjusting DPI, so that
'			images with same settings will fill PDF page the same way. 
' Inputs:	strPath: Path to the image file.
' 			intRes: desired resolution DPI.
'			intMaxDim: Maximum dimension in pixels.
' Returns:	Path to the created file, in the %TEMP% folder.
'*********************************************************
Function ReSizeImage(strPath, intRes, intMaxDim)
	Dim wiaImageFile : Set wiaImageFile = CreateObject("WIA.ImageFile")
	Dim wiaImageProcess : Set wiaImageProcess = CreateObject("WIA.ImageProcess")
	ReSizeImage = strPath
				
	wiaImageProcess.Filters.Add wiaImageProcess.FilterInfos("Exif").FilterID
	wiaImageProcess.Filters.Add wiaImageProcess.FilterInfos("Exif").FilterID	
	wiaImageProcess.Filters.Add wiaImageProcess.FilterInfos("Scale").FilterID
	ShowMessage debugLvl, "Resize " & strPath
	If wiaImageFile.LoadFile(strPath) = False Then 
		If wiaImageFile.Width > intMaxDim Or wiaImageFile.Height > intMaxDim Then
			Dim intNewWidth, intNewHeight
			
			ReSizeImage = objFSO.BuildPath(objShell.ExpandEnvironmentStrings( "%TEMP%" ),_
										  objFSO.GetTempName & "." & objFSO.GetExtensionName(strPath) )
										  
			If wiaImageFile.Width > wiaImageFile.Height Then
				intNewWidth = intMaxDim
				intNewHeight = Round( (wiaImageFile.Height/wiaImageFile.Width) * intMaxDim)
			Else
				intNewHeight = intMaxDim
				intNewWidth = Round( (wiaImageFile.Width/wiaImageFile.Height) * intMaxDim)
			End If

			'ShowMessage debugLvl, "Resize " & strPath & vbCRLF &_
			'	"From: " & wiaImageFile.Height & " x " & wiaImageFile.Width & " @ " & wiaImageFile.HorizontalResolution & " DPI" & vbCrLf &_
			'	"To  : " & intNewHeight & " x " & intNewWidth & " @ " & intRes & " DPI"

			'vertical resolution
			wiaImageProcess.Filters(1).Properties("ID") = 282
			wiaImageProcess.Filters(1).Properties("Value") = intRes
			
			'horizontal resolution			
			wiaImageProcess.Filters(2).Properties("ID") = 283
			wiaImageProcess.Filters(2).Properties("Value") = intRes
						
			wiaImageProcess.Filters(3).Properties("MaximumWidth") = intNewWidth
			wiaImageProcess.Filters(3).Properties("MaximumHeight") = intNewHeight
			
			
			Set wiaImageFile = wiaImageProcess.Apply(wiaImageFile)
			
			If wiaImageFile.SaveFile(ReSizeImage) <> False Then
				ShowMessage errorLvl, "Unable to save image " & ReSizeImage 
				ReSizeImage = strPath
			End If
		End If
	Else
		ShowMessage errorLvl, "Unable to load image " & strPath 
	End If
End Function


Sub AddCaption(PDDoc, intPage, strCaption)
	Dim objJSO : Set objJSO = PDDoc.GetJSObject()
	' Calculate the page width
	Dim aRect : aRect = objJSO.getPageBox("Media", intPage)
	Dim intWid : intWid = aRect(2) - aRect(0)

	'Add the caption box
	Dim objTitleBox
	Set objTitleBox = objJSO.AddField("Caption_" & intPage, "text", intPage, Array(Round(intWid/3), 40, Round((intWid/3)*2), 10))
	'Set the caption text
	objTitleBox.Value = strCaption
	objTitleBox.Alignment = "center"
	objTitleBox.TextFont = "Courier"
	objTitleBox.TextSize = 12
	objTitleBox.fillColor = Array("G", .6)
	'Flatten the field into a text box.
	objJSO.flattenPages()
End Sub

'*********************************************************
' Purpose:	Run a shell command and return the results.
' Inputs:	command: the command to run.
' Returns:	output from the command or the return code.
'*********************************************************
Function shellExec(command)
	Dim exec: Set exec =  objShell.Exec(command)
	Dim tmpOutput	:	tmpOutput = ""
	Dim intLoopCount:	intLoopCount = 0

	ShowMessage infoLvl, "exec command: "  & vbCrLf & command

	Do 
		tmpOutput = tmpOutput & exec.StdOut.ReadAll()
		tmpOutput = tmpOutput & vbCrLf & Exec.StdErr.ReadAll()
	Loop Until exec.Status OR intLoopCount > 30000
	
	If Len(tmpOutput) > 0 Then
		ShowMessage infoLvl, "Exec output: " & vbCrLf & tmpOutput
		shellExec = tmpOutput
	End If
End Function


'*********************************************************
' Purpose:	Prepare and print a place holder sheet 
'			with paths to the media files to go into the case file.
'*********************************************************
Sub PrintPlaceHolder
	Set objWord = CreateObject("Word.Application")
	objWord.Visible = True
	Set objDoc = objWord.Documents.Add(placePath)
	
	Set objSelection = objWord.Selection
	objSelection.EndKey 6, 0
	
	objSelection.TypeParagraph()
	objSelection.TypeText Join(aryFilePaths,vbCRLF)
	
	objDoc.PrintOut()
	objDoc.Close(0) ' Don't Save
	objWord.Quit()
End Sub

'*********************************************************
' Purpose:	Try to use the right preview for the type of document.
'*********************************************************
Sub EmbedPreview
    window.resizeTo 640,820
	If objFSO.FolderExists(strFilePath) Then
		Preview.InnerHTML = strFilePath & "<br><br>Directory contents will be compressed before sharing or archiving."
		Exit Sub
	ElseIf UBound(aryFilePaths) > 0 Then
		Preview.InnerHTML = strFilePath & "<br><br>All selected files will be sent with the same CMS information."
	End If

	Preview.InnerHTML = strFilePath & "<br><iframe src='" & strFilePath & "' width='200' height='290'></iframe>"
End Sub

Function CompressFolder(strFolderPath)
    Dim zipFile 
    Dim intLoopCount : intLoopCount = 20000
    
    With objFSO
		Dim i : i = 2
		zipFile = .BuildPath(_
			objShell.ExpandEnvironmentStrings( "%TEMP%" ),_
			.GetBaseName(strFolderPath) & ".zip")
		
		While .FileExists(zipFile)
			zipFile = .BuildPath( _
				.GetParentFolderName(zipFile),_
				.GetBaseName(strFolderPath) & " (" & i & ").zip")
			i = i + 1
		WEnd
	End With
	
    With CreateObject("Scripting.FileSystemObject")

        With .CreateTextFile(zipFile, True)
            .Write Chr(80) & Chr(75) & Chr(5) & Chr(6) & String(18, chr(0))
	    	.Close
        End With
    End With

    With CreateObject("Shell.Application")
		Dim zipDir : Set zipDir = .NameSpace(zipFile)
		Dim folderDirItems : Set folderDirItems = .NameSpace(strFolderPath).Items
	
	        zipDir.CopyHere(folderDirItems)
	
	 	While ( zipDir.Items.Count < folderDirItems.Count) 'AND intLoopCount > 0
	
		'	intLoopCount = intLoopCount - 1
	  	WEnd
	
		If intLoopCount <= 0 Then
			ShowMessage fataLvl, "Timed out while zipping folder with large or numerous files. Do it manually."
		End If
    End With

    CompressFolder = zipFile
End Function


Sub SetFormContent
	Const strNotInArchive = "File must be in the Case File Archive first."
	Const strInArchive = "File is already in the Case File Archive."
	
	'Set up top line, document title
	Dim numFileIdx : numFileIdx = UBound(aryFilePaths)
	If numFileIdx > 0 Then
		FileName.InnerHTML = strFileName & " (+ " & numFileIdx & " other files)"
	Else
		FileName.InnerHTML = strFileName
	End If
	
	'Set up "office" radio buttons
	'Why does document.getElementsByClassName() not work? 
	If boolInArch Then
		DisabledInArch.style.color = "gray"
		
		archRadio.title = strInArchive
		CMSNumber.title = strInArchive
	Else
		EnabledInArch.style.color = "gray"
		EnabledInArch2.style.color = "gray"
		
		'cloudRadio.title = strNotInArchive
		retdRadio.title = strNotInArchive
		holdCheck.title = strNotInArchive
	End If	
		
	archRadio.disabled = boolInArch	
	archRadio.checked = Not boolInArch
    
	retdRadio.disabled = Not boolInArch
	retdRadio.checked = boolInArch

    	If boolNoDisco Then
		' Disable discovery options if specified from command line
		archRadio.disabled = boolNoDisco
		retdRadio.disabled = boolNoDisco
		retdRadio.checked = Not boolNoDisco		
		pdRadio.disabled = boolNoDisco
		adRadio.disabled = boolNoDisco
		acRadio.disabled = boolNoDisco
		mcRadio.disabled = boolNoDisco
		EnabledAsDisco.style.color = "gray"
	End If

	'cloudRadio.disabled = Not (boolInArch And boolDebug)
	    
	holdCheck.disabled = Not boolInArch

  	'Set up "CMSNumber" text input
	CMSNumber.disabled = boolInArch
  		
  	'Set up "Send Photograph Summary" button
  	Dim boolCanSummary : boolCanSummary = False
  	If Not boolPics Then
  		summCheck.title = "Select more than one picture to generate Summary."
  		EnabledIfPics.style.color = "gray"
  	Elseif Not (boolPro Or boolGS) Then
  	  	summCheck.title = "PDF Authoring Software not installed."
  	  	EnabledIfPics.style.color = "gray"
  	Else 'boolPics And (boolPro Or boolGS)
  		boolCanSummary = True
  	End If
  	
  	summCheck.disabled = Not boolCanSummary
  	summCheck.checked = boolCanSummary

 	If IsNumeric(Mid(strCMSCase, 2, 5)) Then
		'Split on " " makes uploading 911 calls easier
		CMSNumber.Value = Split(strCMSCase," ")(0)
	End If
	
End Sub


Function TypeErrorForFile(strPath)
	TypeErrorForFile = ""

	Select Case LCase(objFSO.GetExtensionName(strPath))
		Case "cda"
			TypeErrorForFile = "Rip this disc with Windows Media Player before uploading."
		Case "dxa"
			'Proprietary surveillance software.
			TypeErrorForFile = "Provide a copy of this CD instead of uploading it."
		Case "exe"
			TypeErrorForFile = "Provide a copy of this CD instead of uploading it."
		Case "lnk"
			TypeErrorForFile = "Open the file location of the shortcut and upload that file instead."
	End Select

	If Len(TypeErrorForFile) > 0 Then
		TypeErrorForFile = 	objFSO.GetFileName(strPath) & " is not a valid data file. " & TypeErrorForFile
	End If
End Function



Sub ShowMessage(intLvl, strMessage)
	Dim strPrefix : strPrefix = ": "
	Select Case intLvl
		Case debugLvl
			strPrefix = "DEBUG"	& strPrefix
		Case infoLvl
			strPrefix = "INFO"	& strPrefix
		Case warnLvl
			strPrefix = "WARNING"	& strPrefix
		Case errorLvl
			strPrefix = "ERROR"	& strPrefix
		Case fatalLvl
			strPrefix = "FATAL"  & strPrefix
		Case silentLvl
		Case Else
			strPrefix = ""
	End Select

	If intLvl <= logLvl Then
		MsgBox(strPrefix & strMessage)
		'Debug.WriteLine(strPrefix & strMessage)
	End If
	If intLvl = fatalLvl Then
		Self.Close()
	End If
End Sub


Sub ShowHelp
	' objShell.Run """\\ad\dfs\SDAT-Shared2\Attorney\CRIMCASE\CaseFile_Archive\Resources\eDiscovery_EDMS_Uploader.pdf"""
	objShell.Run """L:\CaseFile_Archive\Resources\05_Client\eDiscovery_EDMS_Uploader.pdf"""
End Sub

</script>

<span id = "FileName">Loading...</span><span style="position:absolute;right:10;"><a href="\\ad\dfs\SDAT-Shared2\Attorney\CRIMCASE\CaseFile_Archive\Resources\eDiscovery_EDMS_Uploader.pdf">[Help]</a></span>
<h5>Select where to send the file to:</h5>
<span id = "DisabledInArch" class="DisabledInArch">
<input type="radio" id="archRadio" name="office" value="Archive" disabled checked> City Attorney CaseFile Archive
</span><br>

<span id = "EnabledAsDisco" class="EnabledAsDisco">
<span id = "EnabledInArch" class="EnabledInArch">
<input type="radio" id="cloudRadio" name="office" value="FileCloud" disabled> FileCloud<br>
<input type="radio" id="retdRadio"  name="office" value="Retained" disabled> Retained Counsel
</span><br><br>
<input type="radio" id="pdRadio" name="office" value="PrimaryDefender"  > Primary Public Defender<br>
<input type="radio" id="adRadio" name="office" value="AlternateDefender"> Alternate Public Defender<br>
<input type="radio" id="acRadio" name="office" value="AssignedCounsel"  > Office of Assigned Counsel<br>
<input type="radio" id="mcRadio" name="office" value="MultipleConflicts"> Multiple Conflicts Counsel<br>
</span>

<h5>Additional Options:</h5>
<span id = "EnabledInArch2" class="EnabledInArch"><input type="checkbox" id="holdCheck" name="placeholder" class="EnabledInArch" disabled> Print Placeholder Sheet</span>&nbsp&nbsp&nbsp
<span id = "EnabledIfPics"  class="EnabledIfPics"><input type="checkbox" id="summCheck" name="pdfsummary"  class="EnabledIfPics" disabled> Send Photograph Summary</span><br><br>
<!--{{InsertControlsHere}}-Do not remove this line-->
CMS Case Number:  <input type="text" name="CMSNumber" disabled><br>
Type of file: 
 <select name="FileType">
  <option value="">Default</option>
  <option value="CNF">Left Side-Confidential</option>
  <option value="URD">Left Side-Needs Review/Redaction</option>
  <option value="RPS">RAPS</option>
  <option value="CRE">CRE</option>
  <option value="TRN">Transcripts</option>
  <option value="MOT">Motions</option>
  <option value="CII">CI-Confidential</option>
  <option value="COR">Correspondence</option>
  <option value="VIC">Victim Forms/Receipts</option>
  <option value="OTH">Other</option>
  <option value="PAS">Private Atty Share</option>
 </select><br><br>
<span id = "SubmitButton"><input type="button" value="Submit File" type="submit" onClick="Upload"></span>
<hr>
<span id = "Preview"><input type="button" value="Preview" onClick="EmbedPreview"></span><br>
</body>